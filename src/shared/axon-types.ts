/**
 * Shared AXON Component Types
 * 
 * This file contains the interface declarations that all AXON modules need.
 * It's copied from connectome-ts/src/axon/interfaces.ts to ensure consistency.
 * 
 * DO NOT EDIT THIS FILE DIRECTLY!
 * Instead, update connectome-ts/src/axon/interfaces.ts and regenerate.
 */

// Import types - these will be resolved at transpilation time
export declare interface IInteractiveComponent {
  // Original methods
  addOperation(operation: any): void;
  trackPropertyChange(propertyName: string, oldValue: any, newValue: any): void;
  setTrackedProperty<K extends keyof any>(key: K, value: any): void;
  addFacet(facetDef: any): void;
  updateState(facetId: string, updates: any, updateMode?: string): void;
  registerAction(name: string, handler: (params?: any) => Promise<void>): void;
  element: any;
  
  // New helper methods from Component base class
  addAmbient(content: string, idOrAttributes?: string | Record<string, any>, attributes?: Record<string, any>): void;
  addState(facetId: string, content: string, attributes?: Record<string, any>): void;
  changeState(facetId: string, updates: { content?: string; attributes?: Record<string, any> }): void;
  addEvent(displayName: string, content: string, idOrAttributes?: string | Record<string, any>, attributes?: Record<string, any>): void;
  inFrame(): boolean;
  requireFrame(): void;
  getVeilState(): any;
  deferToNextFrame(operation: () => void): void;
}

export declare interface ISpaceEvent<T = unknown> {
  topic: string;
  source: any;
  payload: T;
  timestamp: number;
}

export declare interface IPersistentMetadata {
  propertyKey: string;
  version?: number;
}

export declare interface IExternalMetadata {
  propertyKey: string;
  resourceId: string;
}

export declare interface IAxonEnvironment {
  InteractiveComponent: abstract new() => IInteractiveComponent;
  persistent: (target: any, propertyKey: string) => void;
  persistable: (version: number) => (target: any) => void;
  external: (resourceId: string) => (target: any, propertyKey: string) => void;
  WebSocket?: any;
}
